#include <bits/stdc++.h>
using namespace std;
void addEdge(vector<int>adj[], int u, int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}
void print(vector<int>adj[], int v)
{
    int i,j;
    for(i=0;i<v;i++)
    {
        for(j=0;j<adj[i].size();j++)
        {
            cout<<adj[i][j]<<" ";
        }
        cout<<"\n";
    }
}
bool DFSrec(vector<int>adj[], int s, bool visited[],int parent)
{
    visited[s]=true;
    cout<<s<<" ";
    for(int u: adj[s])
    {
        if(visited[u]==false)
        {
            if(DFSrec(adj,u,visited,s)==true)
           return true;
        }
        else if(u!=parent)
            return true;
    }
    return false;
}
bool DFS(vector<int>adj[], int v, int s)
{
    bool visited[v];
    for(int i=0;i<v;i++)
    visited[i]=false;
    for(int i=0;i<v;i++)
    {
        if(visited[i]==false)
        {
        if(DFSrec(adj,i,visited,-1)==true)
            return true;
        }
    }
    return false;
    //DFSrec(adj,s,visited);
}
int main()
{
    int v,s;
    cout<<"\nEnter the number of vertices";
    cin>>v;
    vector<int> adj[v];
    cout<<"\nEnter source vertex";
    cin>>s;
    addEdge(adj,0,1);
    addEdge(adj,0,4);
    addEdge(adj,1,2);
    //addEdge(adj,1,3);
    addEdge(adj,2,3);
    addEdge(adj,4,5);
    addEdge(adj,4,6);
    addEdge(adj,5,6);
    //addEdge(adj,4,6);
    //addEdge(adj,3,4);
    print(adj,v);
    cout<<"\n";
    if(DFS(adj,v,s)==true)
    cout<<"cycle";
    else
    cout<<"no cycle";
    return 0;
}
