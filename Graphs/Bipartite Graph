#include<bits/stdc++.h>
using namespace std;
vector<vector<int>>adj[1000];
void addEdge(vector<int>d[], int u, int v)
{
    d[u].push_back(v);
    d[v].push_back(u);
}
bool isBipartite(vector<vector<int>>& adj,int N,int node,vector<int>& color)
{
        queue<int> q;
        q.push(node);
        color[node] = 1;
        //Process current graph component using BFS
        while(!q.empty())
        {
            int curr = q.front();
            q.pop();
            for(int ele: adj[curr])
            {
                if(color[ele]==color[curr]) //Odd-cycle
                    return false;
                if(color[ele]==-1)  //Unvisited node
                {
                    color[ele] = 1-color[curr];
                    q.push(ele);
                }
            }
        }
        return true;
}
bool possibleBipartition(int N, vector<int> dislikes[])
{
        vector<vector<int>> adj(N+1);
        for(int i=0;i<N;++i)
        {
            adj[dislikes[i][0]].push_back(dislikes[i][1]);
            adj[dislikes[i][1]].push_back(dislikes[i][0]);
        }

        vector<int> color(N+1,-1);
        for(int i=1;i<=N;++i)
            if(color[i]==-1)
                if(!isBipartite(adj,N,i,color))
                    return false;
        return true;
}
int main()
{
    int e,v,s,d;
    cout<<"\nEnter the number of vertices and no.of edges";
    cin>>v>>e;
    vector<int> dislikes[v];
    //cout<<"\nEnter source vertex";
    //cin>>s;
    for(int i=0;i<e;i++)
    {
        cin>>s>>d;
        addEdge(dislikes,s,d);
    }
  /*cout<<"\nEnter source and destination";
    cin>>s>>d;
    addEdge(adj,0,1);
    addEdge(adj,0,4);
    addEdge(adj,1,2);
    //addEdge(adj,1,3);
    addEdge(adj,2,3);
    addEdge(adj,4,5);
    addEdge(adj,4,6);
    addEdge(adj,5,6);
    //addEdge(adj,4,6);
    //addEdge(adj,3,4); */
   // print(adj,v);

    bool f=possibleBipartition(v,dislikes);
    if(f==true)
        cout<<"yes bipartite";
    else
        cout<<"no not";
    //cout<<"\n";
    //DFS(adj,v,s,d);
    return 0;
}
